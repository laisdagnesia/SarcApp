import React, { useState } from "react";
import { View, Text, ImageBackground, StyleSheet, TextInput } from 'react-native';
import { useNavigation } from "@react-navigation/native";
import { StackNavigationProp } from '@react-navigation/stack';
import { NavegacaoPrincipalParams } from '../navigation/config';
import { ScrollView } from 'react-native';
import { Button, ButtonGroup, withTheme, CheckBox } from '@rneui/themed';

export function FormularioSarcFScreen(props: any) {
    const [forca, setForca] = useState('');
    const [assistencia, setAssistencia] = useState('');
    const [levantar, setLevantar] = useState('');
    const [subir, setSubir] = useState('');
    const [quedas, setQuedas] = useState('');

    type navProps = StackNavigationProp<NavegacaoPrincipalParams, 'menu', 'cadastroPaciente'>;
    const navigation = useNavigation<navProps>();

    const [forcaOptions, setForcaOptions] = useState([
        { label: 'Nenhuma', value: 'nenhuma', checked: false },
        { label: 'Alguma', value: 'alguma', checked: false },
        { label: 'Muito', value: 'muito', checked: false },
        { label: 'Incapaz', value: 'incapaz', checked: false }
    ]);

    const [assistenciaOptions, setAssistenciaOptions] = useState([
        { label: 'Nenhuma', value: 'nenhuma', checked: false },
        { label: 'Alguma', value: 'alguma', checked: false },
        { label: 'Muita', value: 'muita', checked: false },
        { label: 'Incapaz', value: 'incapaz', checked: false }
    ]);

    const [levantarOptions, setLevantarOptions] = useState([
        { label: 'Nenhuma', value: 'nenhuma', checked: false },
        { label: 'Alguma', value: 'alguma', checked: false },
        { label: 'Muito', value: 'muito', checked: false },
        { label: 'Incapaz sem ajuda', value: 'incapaz', checked: false }
    ]);

    const [subirOptions, setSubirOptions] = useState([
        { label: 'Nenhuma', value: 'nenhuma', checked: false },
        { label: 'Alguma', value: 'alguma', checked: false },
        { label: 'Muito', value: 'muito', checked: false },
        { label: 'Incapaz', value: 'incapaz', checked: false }
    ]);

    const [quedasOptions, setQuedasOptions] = useState([
        { label: 'Nenhuma', value: 'nenhuma', checked: false },
        { label: '1 a 3', value: '1 a 3', checked: false },
        { label: '4 ou mais', value: '4 ou mais', checked: false }
    ]);

    const handleCheckBoxChange = (value: string, setFunction: Function, options: any[]) => {
        const updatedOptions = options.map(option => {
            if (option.value === value) {
                option.checked = !option.checked;
            }
            return option;
        });
        setFunction(updatedOptions);
    };

    const getSelectedValues = (options: any[]) => {
        return options.filter(option => option.checked).map(option => option.value).join(', ');
    };

    return (
        <ImageBackground style={styles.container}
            source={require('./../../../assets/images/menu.png')}
        >
            <Text></Text>
            {forcaOptions.map(option => (
                <CheckBox
                    key={option.value}
                    checked={option.checked}
                    onChange={() => handleCheckBoxChange(option.value, setForcaOptions, forcaOptions)}
                    title={option.label}
                />
            ))}
            {assistenciaOptions.map(option => (
                <CheckBox
                    key={option.value}
                    checked={option.checked}
                    onChange={() => handleCheckBoxChange(option.value, setAssistenciaOptions, assistenciaOptions)}
                    title={option.label}
                />
            ))}
            {levantarOptions.map(option => (
                <CheckBox
                    key={option.value}
                    checked={option.checked}
                    onChange={() => handleCheckBoxChange(option.value, setLevantarOptions, levantarOptions)}
                    title={option.label}
                />
            ))}
            {subirOptions.map(option => (
                <CheckBox
                    key={option.value}
                    checked={option.checked}
                    onChange={() => handleCheckBoxChange(option.value, setSubirOptions, subirOptions)}
                    title={option.label}
                />
            ))}
            {quedasOptions.map(option => (
                <CheckBox
                    key={option.value}
                    checked={option.checked}
                    onChange={() => handleCheckBoxChange(option.value, setQuedasOptions, quedasOptions)}
                    title={option.label}
                />
            ))}
            <Button
                title="Salvar"
                style={styles.button}
                containerStyle={{ marginTop: 10, borderRadius: 80 }}
                buttonStyle={{ backgroundColor: 'green', borderRadius: 80 }}
                onPress={() => navigation.navigate('cadastroProfissional')}
                raised={true}></Button>
            <Button title="Voltar" onPress={() => navigation.goBack()}
                buttonStyle={styles.botaoVoltar}
                containerStyle={{ borderRadius: 30, marginTop: 15 }}
                raised={true}></Button>
        </ImageBackground>
    );
}

const styles = StyleSheet.create({
    background: {
        width: '100%',
        height: '100%',
    },
    container: {
        flex: 1,
        justifyContent: 'center',
    },
    button: {
        backgroundColor: 'green',
        borderRadius: 80,
        height: 40,
        width: 300
    },
    botaoVoltar: {
        borderRadius: 80,
        height: 40,
        width: 300,
        backgroundColor: 'green'
    },
    scrollContainer: {
        flexGrow: 1,
        justifyContent: 'center',
        padding: 5,
    },
});
